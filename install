#!/usr/bin/env bash


echo "This is the install script for development only"
echo "Report to README for other environment installation"

DEV_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${DEV_DIR}/common.sh"

# Clone dependencies
for c in ${CALIOPEN_COMPONENTS}
do
    [[ -d "${CALIOPEN_DIR}/${c}" ]] || git clone ${BASE_URL}/caliopen.${c}.git "${CALIOPEN_DIR}/${c}"
done


# install packages
# TODO This should be removed as soon as the service is fully executed through fig.
# aptitude install python python-dev python-virtualenv libffi-dev


# create and activate venv
# TODO This should be removed as soon as the service is fully executed through fig.
command -v virtualenv >/dev/null 2>&1 && VIRTUALENV_CMD="virtualenv"
[[ -n "${VIRTUALENV_CMD}" ]] || (command -v virtualenv2 >/dev/null 2>&1 && VIRTUALENV_CMD="virtualenv2")
command -v pip >/dev/null 2>&1 && PIP_CMD="pip"
[[ -n "${PIP_CMD}" ]] || (command -v pip2 >/dev/null 2>&1 && PIP_CMD="pip2")
command -v python >/dev/null 2>&1 && PYTHON_CMD="python"
[[ -n "${PYTHON_CMD}" ]] || (command -v python2 >/dev/null 2>&1 && PYTHON_CMD="python2")

if [[ -n "${VIRTUALENV_CMD}" ]]
then
    # setup and activate virtualenv
    [[ -d "${CALIOPEN_DIR}/venv" ]] || $VIRTUALENV_CMD ${VENV_OPTS} "${CALIOPEN_DIR}/venv"
    source "${CALIOPEN_DIR}/venv/bin/activate"
else
    # There is no virtualenv command.
    # This is an install script for development purpose
    # There shold be an isolation of some kind.
    echo "This is an install script for development purpose, it is recommanded"
    echo "you isolate the environment using virtualenv or docker."
    echo "Docker installation is not ready yet, so virtualenv is recommanded."
    echo ""
    echo "virtualenv command not found, only remaining option is to install"
    echo "globally."
    echo ""
    read -p "Install anyway? (y/N)" -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        exit 1
    fi
fi

if [[ -z "$PYTHON_CMD" ]] || [[ -z "$PIP_CMD" ]]
then
    echo "pip and python are required to install locally."
    echo "Exiting"
        exit 1
fi


# setup all deps in venv
for d in ${CALIOPEN_COMPONENTS}
do

  cd "${CALIOPEN_DIR}/${d}"
  if [ -f setup.py ] ; then
    $PYTHON_CMD setup.py develop
  fi
  if [ -e requirements.txt ] ; then
    $PIP_CMD install -r requirements.txt
  fi

done

# Install docker-compose in virtualenv
[[ -z "$(which docker-compose)" ]] && pip install docker-compose
COMPOSE_CMD="docker-compose"


# Create data folders
cd "${CALIOPEN_DIR}"
[[ -d "${CALIOPEN_DIR}/.data/cassandra/data" ]] || mkdir -p "${CALIOPEN_DIR}/.data/cassandra/data"
[[ -d "${CALIOPEN_DIR}/.data/elasticsearch/data" ]] || mkdir -p "${CALIOPEN_DIR}/.data/elasticsearch/data"


# Install web
# ================
cd "${CALIOPEN_DIR}/web"

# Use docker-compose to launch npm if no local npm is found
command -v npm >/dev/null 2>&1 || supercharge_npm=1
if [[ ! -z "$supercharge_npm" ]]
then
    function node {
        $COMPOSE_CMD run node $@
    }
    function npm {
        $COMPOSE_CMD run npm $@
    }
    function ember {
        $COMPOSE_CMD run ember $@
    }
fi

source ./bin/install
declare ret="$?"
[[ "0" -eq "$ret" ]] || exit $ret

$COMPOSE_CMD run web-client-ng

# And we're done
echo "DONE"
